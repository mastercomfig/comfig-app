---
import Layout from "@layouts/Layout.astro";
import BaseHead from "@components/head/BaseHead.astro";
import PreloadHead from "@components/head/PreloadHead.astro";
import ImportHead from "@components/head/ImportHead.astro";
import MainHead from "@components/head/MainHead.astro";
import Body from "@components/Body.astro";
import Footer from "@components/Footer.astro";
import HudListItem from "@components/huds/HudListItem.astro";
import HudNav from "@components/huds/HudNav.astro";

import { fetchHuds, fetchAuthors, transformName } from "@ssg/huds";

import { Markdown } from "astro-remote";
import removeMd from "remove-markdown";
import ResponsiveImage from "@components/ResponsiveImage.astro";

export async function getStaticPaths() {
  return (await fetchHuds(true)).map((hud) => ({
    params: {
      id: hud.id,
    },
    props: { hud },
  }));
}

const osToIcon = {
  windows: "windows",
  mac: "apple",
  linux: "linux",
};

const featureToIcon = {
  fonts: "font",
  menus: "table-columns",
  scoreboards: "table-list",
  crosshairs: "crosshairs",
  minmode: "toggle-on",
  "streamer-mode": "eye-low-vision",
  materials: "swatchbook",
  customization: "sliders",
};

const featureToName = {
  fonts: "Custom Fonts",
  menus: "Custom Menus",
  scoreboards: "Extra Scoreboards",
  crosshairs: "HUD Crosshairs",
  minmode: "Minmode Toggle",
  "streamer-mode": "Streamer Mode",
  materials: "Custom Materials",
  customization: "Easy Customization",
};

const gamemodeToIcon = {
  tournament: "people-group",
  comp: "ranking-star",
  arena: "skull-crossbones",
  ad: "shield-halved",
  ctf: "briefcase",
  cp: "ring",
  halloween: "ghost",
  koth: "scale-unbalanced-flip",
  mannpower: "crown",
  mvm: "robot",
  pass: "futbol",
  pl: "timeline",
  plr: "shuffle",
  pd: "wine-bottle",
  rd: "microchip",
  sd: "rocket",
  tc: "map-location-dot",
};

const gamemodeToName = {
  tournament: "Tournament",
  comp: "Competitive",
  arena: "Arena",
  ad: "Attack/Defend",
  ctf: "Capture the Flag",
  cp: "Control Point",
  halloween: "Halloween",
  koth: "King of the Hill",
  mannpower: "Mannpower",
  mvm: "Mann vs. Machine",
  pass: "PASS Time",
  pl: "Payload",
  plr: "Payload Race",
  pd: "Player Destruction",
  rd: "Robot Destruction",
  sd: "Special Delivery",
  tc: "Territorial Control",
};

const languageNames = new Intl.DisplayNames(["en"], {
  type: "language",
});

const { hud } = Astro.props;

const cleanContent = hud.content ? removeMd(hud.content) : "";
let hudDescBase = "";
for (const potentialBase of cleanContent.split("\n")) {
  // Empty newlines are useless...
  const trimmed = potentialBase.trim();
  if (trimmed.length) {
    // If it's only a few words, then it's useless...
    const words = trimmed.split(/\s+/);
    if (words.length > 2) {
      hudDescBase = trimmed;
      break;
    }
  }
}
if (hudDescBase.length < cleanContent.length) {
  hudDescBase += "...";
}
const hudDescription = hudDescBase;

const authors = await fetchAuthors();
---

<Layout>
  <head>
    <BaseHead />
    <PreloadHead />
    <ImportHead>
      <style>
        .verified-gold {
          color: #c5b358;
        }

        .title-author-icon {
          height: 4.125rem;
          vertical-align: text-top;
        }

        .inline-author-icon {
          height: 1.2rem;
          vertical-align: text-top;
        }

        .inline-contributor {
          white-space: nowrap;
        }

        .hud-author-link {
          color: var(--bs-body-color) !important;
        }

        .support-pink {
          background: #880e4f;

          --bs-link-hover-color: #ff8ab3;
        }

        @keyframes introduceCarouselHidable {
          0% {
            opacity: 1;
          }

          100% {
            opacity: 0;
          }
        }

        #hudScreenshots .carousel-hidable {
          transition: opacity 0.5s;
          animation: 1.5s introduceCarouselHidable;
          opacity: 0;
        }

        #hudScreenshots:hover .carousel-hidable {
          opacity: 1;
          animation: 0;
        }
      </style>
      <script>
        import { Carousel } from "bootstrap";

        document.addEventListener("astro:page-load", () => {
          const carouselEl = document.getElementById("hudScreenshots");
          if (carouselEl) {
            const carousel = new Carousel(carouselEl);
          }
        });
      </script>
      <script>
        document.addEventListener("astro:page-load", () => {
          // Download tracking
          const downloadButtonList =
            document.querySelectorAll(".hud-download-btn");
          for (const downloadButton of downloadButtonList) {
            downloadButton.addEventListener("click", async () => {
              const id = window.location.pathname.replaceAll("/huds/page/", "");
              const body = JSON.stringify({ id });
              setTimeout(async () => {
                await fetch("https://worker.comfig.app/api/huds/download/add", {
                  method: "POST",
                  body,
                });
              }, 1000);
            });
          }

          // Check for iframe compat
          const ytIframes: HTMLIFrameElement[] = document.querySelectorAll(
            ".hud-youtube-iframe",
          );
          for (const ytIframe of ytIframes) {
            if (!ytIframe.credentialless) {
              ytIframe.parentElement.innerHTML = `<div class="h-100 d-flex align-items-center justify-content-center align-self-center text-center"><div><p>Due to data tracking protections, YouTube has been blocked from embedding.<br/>Go directly to the site instead.</p><a class="btn btn-warning" href="https://youtu.be/${ytIframe.title}" target="_blank" rel="noopener"><strong>Go to YouTube</strong></a></div></div>`;
            }
          }
        });
      </script>
    </ImportHead>
    <MainHead
      title={`${hud.name}`}
      site="comfig huds - mastercomfig"
      description={`${
        hud.name
      } on comfig huds, a modern Team Fortress 2 HUD directory.${
        hudDescription ? ` About ${hud.name}: ${hudDescription}` : ``
      }`}
      image={hud.resourceUrls[0]}
    />
    <style>
      .carousel {
        aspect-ratio: 16 / 9;
      }

      .list-group {
        --bs-list-group-bg: #151515;
        --bs-list-group-color: #f2f2f2;

        background: #0d0d0d1c;
        flex: 1;
      }
    </style>
  </head>
  <Body>
    <HudNav />
    <div class="container g-0">
      <h1 class="display-1 mt-3">
        {hud.name}<span class="text-muted display-4"
          >&nbsp;by {hud.authorId === "unknown" && "Unknown"}{
            hud.authorId !== "unknown" && (
              <a href={`/huds/author/${hud.authorId}`}>
                {hud.ghAuthor && (
                  <img
                    class="title-author-icon rounded-circle"
                    src={`https://avatars.githubusercontent.com/${hud.ghAuthor}`}
                    alt="i"
                    crossorigin=""
                  />
                )}
                <span class="hud-author-link">{hud.author}</span>
              </a>
            )
          }</span
        >
      </h1>
      {
        (hud.resources.length > 1 && (
          <div id="hudScreenshots" class="carousel carousel-light slide">
            <div class="carousel-indicators carousel-hidable">
              {hud.resources.map((resource, index) => (
                <button
                  type="button"
                  data-bs-target="#hudScreenshots"
                  data-bs-slide-to={index}
                  class={`${index == 0 ? "active" : ""}`}
                  aria-current="true"
                  aria-label={`Slide ${index + 1} ${resource}`}
                />
              ))}
            </div>
            <div class="carousel-inner h-100">
              {hud.resourceUrls.map((resource, index) => (
                <div
                  class={`carousel-item h-100 ${index == 0 ? "active" : ""}`}
                >
                  {(resource.startsWith("https://www.youtube.com/") && (
                    <div class="h-100 w-100">
                      <iframe
                        class="hud-youtube-iframe h-100 w-100"
                        style="border:none"
                        src={resource}
                        title={`${hud.resources[index].replace("https://youtu.be/", "")}`}
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen
                        loading="lazy"
                        referrerpolicy="no-referrer"
                        sandbox="allow-scripts allow-same-origin allow-presentation allow-popups allow-popups-to-escape-sandbox"
                        credentialless
                      />
                    </div>
                  )) || (
                    <img
                      loading="lazy"
                      src={resource}
                      class="d-block w-100 position-relative translate-middle top-50 start-50"
                      alt={`${hud.resources[index]}`}
                      crossorigin=""
                    />
                  )}
                </div>
              ))}
            </div>
            <button
              class="carousel-control-prev carousel-hidable"
              type="button"
              data-bs-target="#hudScreenshots"
              data-bs-slide="prev"
            >
              <span class="carousel-control-prev-icon" aria-hidden="true" />
              <span class="visually-hidden">Previous</span>
            </button>
            <button
              class="carousel-control-next carousel-hidable"
              type="button"
              data-bs-target="#hudScreenshots"
              data-bs-slide="next"
            >
              <span class="carousel-control-next-icon" aria-hidden="true" />
              <span class="visually-hidden">Next</span>
            </button>
          </div>
        )) || (
          <div class="w-100 ratio ratio-16x9">
            <img
              class="img-fluid object-fit-contain"
              src={hud.resourceUrls[0]}
              alt={`${hud.resources[0]}`}
              crossorigin=""
            />
          </div>
        )
      }
      <div class="row g-1 my-3">
        <div class="col">
          <a
            href={hud.isGithub ? hud.versions[0].downloadUrl : hud.repo}
            class=`btn ${hud.isGithub ? "btn-secondary" : "btn-warning"} hud-download-btn w-100 h-100 btn-lg d-flex align-items-center justify-content-center`
            target={hud.isGithub ? undefined : "_blank"}
            rel={hud.isGithub ? undefined : "noopener noreferrer"}
            data-bs-toggle={hud.isGithub ? undefined : "tooltip"}
            data-bs-placement={hud.isGithub ? undefined : "top"}
            data-bs-title={hud.isGithub
              ? undefined
              : "This external HUD has not been reviewed!"}
            ><div>
              <span class="h3 fw-bold"
                ><span
                  class={`fas fa-${
                    hud.isGithub ? "download" : "up-right-from-square"
                  } fa-fw`}></span> Download {hud.versions[0].name ?? ""}</span
              >
              {
                (hud.versions.length === 1 && (
                  <>
                    <br />
                    Last updated{" "}
                    <strong>{`${hud.publishDate.toLocaleDateString("en-us", {
                      year: "numeric",
                      month: "short",
                      day: "numeric",
                    })}`}</strong>
                  </>
                )) || (
                  <>
                    <br />
                    Latest stable release
                  </>
                )
              }
            </div>
          </a>
        </div>
        {
          hud.versions.length === 2 && (
            <div class="col-lg-auto col">
              <a
                href={hud.isGithub ? hud.versions[1].downloadUrl : hud.repo}
                class="btn btn-warning hud-download-btn w-100 h-100 d-flex align-items-center justify-content-center"
                target={hud.isGithub ? undefined : "_blank"}
                rel={hud.isGithub ? undefined : "noopener noreferrer"}
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                data-bs-title="This version has not yet been reviewed!"
              >
                <div>
                  <span class="h3 fw-bold">
                    <span class={`fas fa-warning fa-fw`} /> Prerelease{" "}
                    {hud.versions[1].name ?? ""}
                  </span>
                  <br />
                  Last updated{" "}
                  <strong>{`${hud.publishDate.toLocaleDateString("en-us", {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                  })}`}</strong>
                </div>
              </a>
            </div>
          )
        }
      </div>

      <div class="row flex-md-row-reverse align-items-stretch">
        <div class={hud.content ? "col-md-3 d-md-flex flex-md-column" : ""}>
          <ul class="list-group list-group-flush">
            <li class="list-group-item">
              <strong>
                <span
                  class={`fas ${
                    hud.prerelease
                      ? "fa-flask text-warning"
                      : "fa-circle-check text-success"
                  } fa-fw`}></span> Release status:&nbsp;</strong
              >
              {hud.prerelease ? "Preview" : "Stable"}
            </li>
            <li class="list-group-item">
              <strong>
                <span
                  class={`fas ${
                    hud.outdated
                      ? "fa-circle-exclamation text-danger"
                      : hud.verified
                        ? "fa-square-check verified-gold"
                        : "fa-circle-check text-success"
                  } fa-fw`}></span>
                Compatibility:&nbsp;</strong
              >
              {
                hud.outdated
                  ? "Incompatible"
                  : hud.verified
                    ? "Verified"
                    : "Up to date"
              }
            </li>
            {
              hud.social.album && (
                <a
                  href={hud.social.album}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fas fa-images fa-fw" /> Screenshot Album
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.isGithub && (
                <a
                  href={`${hud.repo}/tree/${hud.versions[0].hash}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-github fa-fw" /> GitHub
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.issues && (
                <a
                  href={hud.social.issues}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fas fa-circle-question fa-fw" />
                    Help/Requests
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.support && (
                <a
                  href={hud.social.support}
                  class="list-group-item d-flex justify-content-between align-items-center support-pink"
                >
                  <span>
                    <span class="fas fa-hand-holding-heart fa-fw" /> Support
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.discord && hud.social.discord.includes("#") && (
                <li class="list-group-item">
                  <strong>
                    <span class="fab fa-discord fa-fw" />
                    Discord:&nbsp;
                  </strong>
                  <span>
                    {Number(hud.social.discord.split("#")[1]) === 0
                      ? hud.social.discord.split("#")[0]
                      : hud.social.discord}
                  </span>
                </li>
              )
            }
            {
              hud.social.discord && !hud.social.discord.includes("#") && (
                <a
                  href={`https://discord.gg/${hud.social.discord}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-discord fa-fw" /> Discord
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.steam_group && (
                <a
                  href={`https://steamcommunity.com/groups/${hud.social.steam_group}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-steam fa-fw" /> Steam Group
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.steam_profile && (
                <a
                  href={`https://steamcommunity.com/profiles/${hud.social.steam_profile}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-steam fa-fw" /> Steam Profile
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.twitter && (
                <a
                  href={`https://twitter.com/${hud.social.twitter}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-twitter fa-fw" /> Twitter
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.youtube && (
                <a
                  href={`https://www.youtube.com/${hud.social.youtube}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-youtube fa-fw" /> YouTube
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.social.twitch && (
                <a
                  href={`https://twitch.tv/${hud.social.twitch}`}
                  class="list-group-item d-flex justify-content-between align-items-center"
                >
                  <span>
                    <span class="fab fa-twitch fa-fw" /> Twitch
                  </span>
                  <span class="fas fa-square-arrow-up-right fa-fw" />
                </a>
              )
            }
            {
              hud.releaseDate && (
                <li class="list-group-item">
                  <strong>Release Date:&nbsp;</strong>
                  {`${hud.releaseDate.toLocaleDateString("en-us", {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                  })}`}
                </li>
              )
            }
            {
              hud.contributors && (
                <li class="list-group-item">
                  <strong>Contributors:&nbsp;</strong>
                  {hud.contributors.map((contributor, i) => (
                    <>
                      <span>
                        {i > 0 && " |"}
                        {authors[transformName(contributor)] ? (
                          <a
                            class="inline-contributor"
                            href={`/huds/author/${transformName(contributor)}`}
                          >
                            {authors[transformName(contributor)].ghAuthor && (
                              <img
                                class="inline-author-icon rounded-circle"
                                src={`https://avatars.githubusercontent.com/${authors[transformName(contributor)].ghAuthor}`}
                                alt="i"
                                crossorigin=""
                              />
                            )}
                            {contributor}
                          </a>
                        ) : (
                          contributor
                        )}
                      </span>
                    </>
                  ))}
                </li>
              )
            }
            {
              hud.traits?.os && (
                <li class="list-group-item">
                  <strong>Platform:&nbsp;</strong>
                  {hud.traits.os.map((os) => (
                    <span class={`fab fa-${osToIcon[os]} fa-fw`} />
                  ))}
                </li>
              )
            }
            {
              hud.traits?.res && (
                <li class="list-group-item">
                  <strong>Resolutions:&nbsp;</strong>
                  {hud.traits.res.join(", ").replaceAll("/", ":")}
                </li>
              )
            }
            {
              hud.traits?.position && (
                <li class="list-group-item">
                  <strong>Position:&nbsp;</strong>
                  {hud.traits.position
                    .map((p) => p[0].toUpperCase() + p.substring(1))
                    .join(", ")}
                </li>
              )
            }
            {
              hud.traits?.lang && (
                <li class="list-group-item">
                  <strong>Languages:&nbsp;</strong>
                  {hud.traits.lang.map((l) => languageNames.of(l)).join(", ")}
                </li>
              )
            }
          </ul>
        </div>
        {
          hud.content && (
            <div class="col-md-9">
              <Markdown
                content={hud.content}
                components={{ img: ResponsiveImage }}
              />
            </div>
          )
        }
      </div>
      {
        hud.tags && (
          <small>
            <strong>Tags:&nbsp;</strong> {hud.tags.join(", ")}
          </small>
        )
      }
      {
        hud.flags && (
          <>
            <hr />
            <h3>Features</h3>
            <div class="container g-0">
              <div class="card-group row">
                {hud.flags.map((f) => (
                  <div class="col-6 col-md-3">
                    <div class="card text-start mt-4">
                      <div class="card-body text-center">
                        <div class="h1">
                          <span class={`fas fa-${featureToIcon[f]} fa-fw`} />
                        </div>
                        <h5 class="card-title mt-3">{featureToName[f]}</h5>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </>
        )
      }
      {
        hud.traits?.gamemode && (
          <>
            <h3 class="mt-3">Gamemodes</h3>
            <div class="container g-0">
              <div class="card-group row">
                {hud.traits.gamemode.map((gm) => (
                  <div class="col-6 col-md-3 col-lg-2">
                    <div class="card text-start mt-4">
                      <div class="card-body text-center">
                        <div class="h2">
                          <span class={`fas fa-${gamemodeToIcon[gm]} fa-fw`} />
                        </div>
                        <h6 class="card-title mt-3">{gamemodeToName[gm]}</h6>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </>
        )
      }
      {
        hud.variants && (
          <>
            {hud.parent && (
              <>
                <hr />
                <h1>Based on</h1>
                <div class="row">
                  <div class="col-12 col-md-2 col-lg-4 mt-3">
                    <HudListItem hud={hud.parentHud} />
                  </div>
                </div>
              </>
            )}
            {hud.variants.length > 0 && (
              <>
                <hr />
                <h1>{hud.parent ? "Other Variants" : "Variants"}</h1>
                <div class="row">
                  {hud.variants.map((variant) => (
                    <div class="col-12 col-md-2 col-lg-4 mt-3">
                      <HudListItem hud={variant} />
                    </div>
                  ))}
                </div>
              </>
            )}
          </>
        )
      }
      <hr />
    </div>
    <Footer />
    <footer class="container g-0">
      <br />
      <p>
        <a href="https://github.com/mastercomfig/comfig-app"
          ><span class="fab fa-github fa-fw"></span> Source code</a
        >
      </p>
    </footer>
  </Body>
</Layout>
