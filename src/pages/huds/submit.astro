---
import Body from "@components/Body.astro";
import Footer from "@components/Footer.astro";
import BaseHead from "@components/head/BaseHead.astro";
import ImportHead from "@components/head/ImportHead.astro";
import MainHead from "@components/head/MainHead.astro";
import PreloadHead from "@components/head/PreloadHead.astro";
import HudNav from "@components/huds/HudNav.astro";
import Layout from "@layouts/Layout.astro";

import EasyMdeLoader from "@components/loaders/EasyMdeLoader.astro";
import HudFormLoader from "@components/loaders/HudFormLoader.astro";
import TooltipLoader from "@components/loaders/TooltipLoader.astro";
import { fetchCache } from "@ssg/fetchCache";
import "@styles/mde.scss";
import "easymde/dist/easymde.min.css";

const schema = await fetchCache(
  "https://raw.githubusercontent.com/mastercomfig/hud-db/main/utils/hud-data.schema.json",
);

const schemaProps = Object.entries(schema.properties);

const nameIndex = schemaProps.findIndex(([prop, propSchema]) => {
  return prop === "name";
});

schemaProps.splice(
  nameIndex + 1,
  0,
  [
    "id",
    {
      title: "HUD ID",
      description:
        "The ID for your HUD. This should be a unique, all lowercase, dashed name.",
      type: "string",
      examples: ["my-hud"],
    },
  ],
  [
    "description",
    {
      title: "Description",
      description: "A full description of your HUD. (supports Markdown)",
      type: "text",
      rows: 25,
    },
  ],
);

schema.required.push("id");

const featuresIndex = schemaProps.findIndex(([prop, propSchema]) => {
  return prop === "flags";
});

schemaProps.splice(featuresIndex, 0, [
  "options",
  {
    title: "Additional Options",
    description: "Additional options for your HUD.",
    type: "object",
  },
]);

const repoIndex = schemaProps.findIndex(([prop, propSchema]) => {
  return prop === "repo";
});

schemaProps.splice(repoIndex, 0, [
  "release",
  {
    title: "Release Info",
    description: "Where to download your HUD and its version.",
    type: "object",
  },
]);

const requiredProps = new Set(schema.required);

const excludedProps = new Set([
  "verified",
  "usesReleases",
  "githubAuthor",
  "publishDate",
]);
const excludedSections = new Set(["traits"]);

const nameMappings = {
  "traits.os": "OS",
  "social.youtube": "YouTube",
};

const enumMappings = {
  "traits.gamemode": {
    comp: "Competitive",
    ad: "Attack/Defend",
    ctf: "Capture the Flag",
    cp: "Control Points",
    koth: "King of the Hill",
    mvm: "Mann vs. Machine",
    pass: "Pass Time",
    pl: "Payload",
    plr: "Payload Race",
    pd: "Player Destruction",
    rd: "Robot Destruction",
    sd: "Special Delivery",
    tc: "Territorial Control",
  },
};

function getPropName(prop) {
  if (nameMappings[prop]) {
    return nameMappings[prop];
  }
  return prop
    .split(".")
    .pop()
    .replace(/([A-Z])/g, " $1")
    .replace("_", " ")
    .replace(/^./, (str) => str.toUpperCase());
}

function capitalizeString(str) {
  str = str.replaceAll("-", " ");
  return str.split(" ").map((word, index) => {
    return (
      word[0].toUpperCase() +
      word.slice(1) +
      (index === str.length - 1 ? "" : " ")
    );
  });
}

function parseProp(prop, propSchema) {
  if (excludedProps.has(prop)) {
    return [];
  }
  const type = propSchema.type;
  const required = requiredProps.has(prop);
  const title = propSchema.title;
  const description = propSchema.description;
  if (type === "object") {
    const props = Object.entries(propSchema.properties ?? {});
    const section = {
      prop,
      name: title ?? getPropName(prop),
      description,
      type,
    };
    const children = props.flatMap(([childProp, childPropSchema]) =>
      parseProp(`${prop}.${childProp}`, childPropSchema),
    );
    if (!excludedSections.has(prop)) {
      children.splice(0, 0, section);
    }
    return children;
  } else {
    const example = propSchema.examples?.[0];
    return [
      {
        prop,
        name: title ?? getPropName(prop),
        description,
        type,
        required,
        example,
        choices: propSchema.items?.enum
          ? enumMappings[prop]
            ? propSchema.items?.enum.map((v) => ({
                id: v,
                name: enumMappings[prop][v] ?? capitalizeString(v),
              }))
            : propSchema.items?.enum.map((v) => ({
                id: v,
                name: capitalizeString(v),
              }))
          : undefined,
      },
    ];
  }
}

const specialDescriptions = new Set(["hash", "resources", "description"]);

const form = schemaProps.flatMap(([prop, propSchema]) =>
  parseProp(prop, propSchema),
);
---

<Layout>
  <head>
    <BaseHead />
    <PreloadHead />
    <ImportHead />
    <MainHead
      title="Submit a HUD"
      site="comfig huds - mastercomfig"
      description="comfig huds by mastercomfig is a modern Team Fortress 2 HUD directory. You can find HUDs to customize the look of your menus and in-game UI, and easily install them to your game after finding the one that suits your style and needs."
    />
  </head>
  <Body>
    <HudFormLoader />
    <TooltipLoader />
    <EasyMdeLoader />
    <HudNav />
    <div class="container g-0">
      <br />
      <div class="text-light">
        <h1>Submit a HUD</h1>
        <p class="lead">
          We require HUDs to be published on GitHub. For more information about
          the process, visit the <a
            href="https://github.com/mastercomfig/hud-db?tab=readme-ov-file#hud-db"
            target="_blank"
            rel="noopener">hud-db GitHub repo</a
          >.
          <form id="hud-form" class="needs-validation" novalidate>
            {
              form.map((entry) => {
                return (
                  <div class="mb-3">
                    {entry.type === "object" && <h2>{entry.name}</h2>}
                    {entry.type !== "object" && (
                      <>
                        <label for={entry.prop} class="form-label">
                          {entry.name}
                          {entry.required && <span class="text-danger">*</span>}
                          {entry.type === "array" && !entry.choices && (
                            <small>(Comma-separated list)</small>
                          )}
                        </label>
                        <br />
                      </>
                    )}
                    {entry.type === "string" && (
                      <>
                        <input
                          type="text"
                          class="form-control"
                          id={entry.prop}
                          aria-describedby={`${entry.prop}-help`}
                          placeholder={entry.example}
                          required={entry.required ? true : undefined}
                        />
                        <div class="valid-feedback" />
                        <div
                          class="invalid-feedback"
                          id={`${entry.prop}-invalid`}
                        />
                      </>
                    )}
                    {entry.type === "boolean" && (
                      <>
                        <div class="form-check form-switch">
                          <input
                            class="form-check-input"
                            type="checkbox"
                            role="switch"
                            id={entry.prop}
                          />
                        </div>
                      </>
                    )}
                    {entry.type === "array" && entry.choices && (
                      <div id={entry.prop} class="form-wrapper">
                        {entry.choices.map((choice) => (
                          <div class="form-check form-check-inline">
                            <input
                              class="form-check-input"
                              type="checkbox"
                              id={`${entry.prop}:${choice.id}`}
                              value="on"
                            />
                            <label
                              class="form-check-label"
                              for={`${entry.prop}:${choice.id}`}
                            >
                              {choice.name}
                            </label>
                          </div>
                        ))}
                      </div>
                    )}
                    {entry.type === "array" && !entry.choices && (
                      <>
                        <input
                          type="text"
                          class="form-control"
                          id={entry.prop}
                          aria-describedby={`${entry.prop}-help`}
                          placeholder={entry.example}
                          required={entry.required ? true : undefined}
                          data-array="true"
                        />
                        <div class="valid-feedback" />
                        <div
                          class="invalid-feedback"
                          id={`${entry.prop}-invalid`}
                        />
                      </>
                    )}
                    {entry.type === "text" && (
                      <>
                        <textarea
                          class="form-control"
                          id={entry.prop}
                          rows={15}
                          aria-describedby={`${entry.prop}-help`}
                          placeholder={entry.example}
                          required={entry.required ? true : undefined}
                        />
                        <div class="valid-feedback" />
                        <div
                          class="invalid-feedback"
                          id={`${entry.prop}-invalid`}
                        />
                      </>
                    )}
                    <div id={`${entry.prop}-help`} class="form-text">
                      {!specialDescriptions.has(entry.prop) &&
                        entry.description}
                      {entry.prop === "hash" && (
                        <>
                          {entry.description.split(" (")[0]}.
                          <a
                            href="https://github.com/mastercomfig/hud-db?tab=readme-ov-file#how-to-retrieve-the-hash"
                            target="_blank"
                            rel="noopener"
                          >
                            Learn how to retrieve this.
                          </a>
                          {" ("}
                          {entry.description.split(" (")[1]}
                        </>
                      )}
                      {entry.prop === "resources" && (
                        <>
                          {entry.description}
                          <a
                            href="https://github.com/mastercomfig/hud-db?tab=readme-ov-file#hud-resources"
                            target="_blank"
                            rel="noopener"
                          >
                            Learn more here.
                          </a>
                        </>
                      )}
                      {entry.prop === "description" && (
                        <>
                          {entry.description}
                          <a
                            href="https://github.com/mastercomfig/hud-db?tab=readme-ov-file#hud-pages"
                            target="_blank"
                            rel="noopener"
                          >
                            Learn more here.
                          </a>
                        </>
                      )}
                    </div>
                  </div>
                );
              })
            }
            <button type="submit" class="btn btn-primary text-light"
              >Generate</button
            >
          </form>
          <br />
          <div class="text-light">
            <p class="lead">
              <strong
                >Once you've generated your HUD files, use the <a
                  href="https://github.com/mastercomfig/hud-db"
                  target="_blank"
                  rel="noopener">hud-db GitHub repo</a
                > to submit your HUD.
              </strong>
            </p>
            You can find additional information on how to upload there.
            <hr />
          </div>
          <Footer />
          <footer class="container g-0">
            <br />
            <p>
              <a
                href="https://github.com/mastercomfig/comfig-app"
                rel="noopener"
                ><span class="fab fa-github fa-fw"></span> Source code</a
              >
            </p>
          </footer>
        </p>
      </div>
    </div>
  </Body>
</Layout>
