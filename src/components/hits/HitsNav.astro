---
import NavSelector from "@components/NavSelector.astro";
import MiniHitsPlayer from "./MiniHitsPlayer.astro";
---

<style>
  .form-control {
    background: rgb(37 108 102 / 40%);
    color: #fff;
  }

  .form-control:focus {
    border: 1px solid rgb(37 108 102 / 40%) !important;
    box-shadow: 0 -0.5rem 0.5rem rgb(37 108 102 / 40%) !important;
    color: #fff;
  }

  .form-control::placeholder {
    color: rgb(220 220 220 / 70%);
  }

  .form-control:focus::placeholder {
    color: rgb(220 220 220 / 90%);
  }

  .form-control::selection {
    background: rgb(0 206 187 / 50%);
  }

  #hits-search-results {
    max-height: 90vh;
    box-shadow: 0 0 1rem 1rem rgb(0 0 0 / 50%);
    width: 100%;
    overflow-y: auto;
    transform: translate(-50%, 0);
    z-index: 4;
  }

  @media (width >= 992px) {
    #hits-search-results {
      width: max(calc(960px * 0.495), 24.5vw);
      max-width: 653px;
      transform: translate(-50.7%, 0);
    }

    #search-input-container {
      position: absolute;
      transform: translate(-50%, -50%);
      left: 50%;
      top: 50%;
      width: max(calc(960px * 0.5), 25vw);
      max-width: 660px;
    }
  }
</style>

<style is:global>
  .search-result-img-container {
    aspect-ratio: 16 / 9;
  }
</style>

<MiniHitsPlayer />

<script>
  import hitsounds from "@ssg/hitsounds.json";
  import debounce from "debounce";
  import MiniSearch from "minisearch";

  document.addEventListener("astro:page-load", () => {
    const searchResults = document.getElementById("hits-search-results");
    if (!searchResults) {
      return;
    }

    const fields = ["id", "type"];

    const existingIds = new Map();

    const hs = hitsounds.hitsounds.map((s) => {
      s.type = "hitsound";
      return s;
    });
    const ks = hitsounds.killsounds.map((s) => {
      s.type = "killsound";
      return s;
    });

    const documents = hs.concat(ks).map((hitsound) => {
      if (existingIds.has(hitsound.name)) {
        const curr = existingIds.get(hitsound.name);
        existingIds.set(hitsound.name, curr + 1);
        hitsound.name = hitsound.name + curr;
      } else {
        existingIds.set(hitsound.name, 1);
      }
      return {
        id: hitsound.name,
        type: hitsound.type,
        hash: hitsound.hash,
      };
    });
    const miniSearch = new MiniSearch({
      fields,
      storeFields: [...fields, "hash"],
    });
    miniSearch.addAll(documents);

    const emptySearch = '<p class="lead m-0">Type to search for sounds!</p>';
    const noResults = '<p class="lead m-0">No results found.</p>';

    let currentInput = "";
    function searchInternal(query) {
      currentInput = query;
      if (!query || query.length === 0) {
        searchResults.innerHTML = emptySearch;
        return;
      }
      const results = miniSearch.search(query, {
        prefix: true,
      });
      if (!results || results.length === 0) {
        searchResults.innerHTML = noResults;
        return;
      }
      searchResults.innerHTML = "";
      const largeSearch = results.length > 28;
      let observer: IntersectionObserver | null = null;
      if (largeSearch) {
        observer = new IntersectionObserver((entries) => {
          entries.forEach(
            (entry) => {
              const htmlTarget = entry.target as HTMLElement;
              if (entry.isIntersecting) {
                if (htmlTarget.dataset.visible !== "1") {
                  const ev = new CustomEvent("playerVisible", {
                    detail: { visible: true },
                  });
                  htmlTarget.dataset.visible = "1";
                  entry.target.dispatchEvent(ev);
                }
              } else {
                if (htmlTarget.dataset.visible !== "0") {
                  const ev = new CustomEvent("playerVisible", {
                    detail: { visible: false },
                  });
                  htmlTarget.dataset.visible = "0";
                  entry.target.dispatchEvent(ev);
                }
              }
            },
            {
              root: searchResults,
              threshold: 0.1,
            },
          );
        });
      }
      for (const result of results) {
        const hitsPlayer = document.createElement("mini-hits-player");
        hitsPlayer.dataset.id = result.id;
        hitsPlayer.dataset.type = result.type;
        hitsPlayer.dataset.hash = result.hash;
        hitsPlayer.dataset.loadImmediately = largeSearch ? "0" : "1";
        searchResults.appendChild(hitsPlayer);
        if (observer) {
          observer.observe(hitsPlayer);
        }
      }
    }

    // TODO: 145ms may be too low, investigate to adjust
    const search = debounce(searchInternal, 145);

    const searchInput = document.getElementById("search-input");
    searchInput.addEventListener("input", (event) => {
      const query = event.target.value;
      search(query);
    });
    let isFocused = false;
    let clickedOut = true;
    searchInput.addEventListener("focus", (event) => {
      const query = event.target.value;
      if (query !== currentInput) {
        search(query);
        search.flush();
      }
      searchResults.classList.remove("d-none");
      isFocused = true;
      clickedOut = false;
    });
    // Only remove search results if not clicking the search results
    searchInput.addEventListener("blur", () => {
      isFocused = false;
    });
    window.addEventListener("click", (event) => {
      if (!isFocused && !searchResults.contains(event.target)) {
        searchResults.classList.add("d-none");
        if (!clickedOut && !isFocused) {
          event.preventDefault();
          clickedOut = true;
        }
      }
    });
  });
</script>

<div class="g-0 g-lg-4">
  <nav class="navbar navbar-expand-sm sticky-top navbar-dark bg-teal">
    <div class="container g-0">
      <span class="navbar-brand">
        <img
          src="/img/mastercomfig_logo_transparent_i.svg"
          alt=""
          class="d-inline-block align-text-top"
          width="24"
          height="24"
        />
        <span class="d-none d-md-inline"> comfig</span>
      </span>
      <NavSelector pageName="hits" />
      <div class="collapse navbar-collapse"></div>
      <div class="flex-fill" id="search-input-container" role="search">
        <input
          id="search-input"
          class="form-control me-2"
          type="search"
          placeholder="Search"
          aria-label="Search"
        />
      </div>
      <div id="navbarNav"></div>
    </div>
  </nav>
  <div class="position-relative">
    <div
      id="hits-search-results"
      class="d-none position-absolute top-0 start-50 bg-dark p-3"
    >
      <p class="lead m-0">Type to search for sounds!</p>
    </div>
  </div>
</div>
