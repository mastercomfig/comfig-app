---
const { hash } = Astro.props;
---

<hud-search data-hash={hash}></hud-search>

<script>
  import debounce from "debounce";
  import MiniSearch from "minisearch";

  class HudSearch extends HTMLElement {
    async connectedCallback() {
      const hash = this.dataset.hash;

      const fields = [
        "name",
        "author",
        "content",
        "flags",
        "tags",
        "os",
        "gamemode",
        "res",
        "position",
      ];
      const queryFields = new Set(["name", "author"]);
      const filterFields = new Set([
        "flags",
        "tags",
        "os",
        "gamemode",
        "res",
        "position",
      ]);
      const boostConfig = {
        name: 5,
        author: 2,
      };

      function buildExpressionTree(q) {
        let terms = q.split(" ");
        // Trim whitespace
        terms = terms.map((term) => term.trim());
        // Remove empty terms
        terms = terms.filter((term) => term.length > 0);
        // Normalize case
        terms = terms.map((term) => term.toLowerCase());
        // Remove duplicates
        terms = Array.from(new Set(terms));
        let query = "";
        const fieldQueries = new Map();
        const fieldFilters = new Map();
        const boostFields = [...Object.keys(boostConfig)];
        for (const term of terms) {
          if (term.indexOf(":") === -1) {
            // Recombine the search query
            query += `${term} `;
          } else {
            let [field, value] = term.split(":", 2);
            if (field === "has") {
              // Special case for has: flag
              field = "flags";
            }
            if (queryFields.has(field)) {
              const fieldQuery = fieldQueries.get(field) || [];
              fieldQuery.push(value);
              fieldQueries.set(field, fieldQuery);
            } else if (filterFields.has(field)) {
              const values = value.split(",");
              const fieldFilter = fieldFilters.get(field) || [];
              fieldFilter.push(values);
              fieldFilters.set(field, fieldFilter);
            }
          }
        }
        // Trim last term's whitespace
        query = query.trimEnd();
        // Initialize base query
        let queryVal;
        if (fieldQueries.size > 0) {
          // Clear the array
          boostFields.length = 0;
          let filterObj = {
            combineWith: "AND",
            queries: [],
          };
          for (const [field, values] of fieldQueries) {
            if (boostConfig[field] !== undefined) {
              boostFields.push(field);
            }
            filterObj.queries.push({
              fields: [field],
              queries: values,
              combineWith: "OR",
            });
          }
          queryVal =
            query.length > 0
              ? {
                  combineWith: "AND",
                  queries: [query, filterObj],
                }
              : filterObj;
        } else {
          queryVal = query;
        }
        // Handle match filtering
        let options;
        if (fieldFilters.size > 0) {
          options = {
            filter: (result) => {
              let success = true;
              for (const [field, filterCompList] of fieldFilters) {
                const fieldVal = new Set(result[field]);
                let fieldSuccess = false;
                for (const filterComp of filterCompList) {
                  let filterSuccess = true;
                  for (const filterVal of filterComp) {
                    // AND - field values within the same filter must all match
                    if (!fieldVal.has(filterVal)) {
                      filterSuccess = false;
                      break;
                    }
                  }
                  // OR - separate field filters of the same field mean the user wants to match any of the filters
                  if (filterSuccess) {
                    fieldSuccess = true;
                    break;
                  }
                }
                // AND - each different field matcher must succeed
                if (!fieldSuccess) {
                  success = false;
                  break;
                }
              }
              return success;
            },
          };
        } else {
          options = {};
        }
        let boost = {};
        for (const field of boostFields) {
          boost[field] = boostConfig[field];
        }
        options.boost = boost;
        options.prefix = true;
        return [queryVal, options];
      }

      const documents = await fetch(`/huds/search/${hash}.cached.json`).then(
        (res) => res.json(),
      );
      const miniSearch = new MiniSearch({
        fields: fields,
        storeFields: [...fields, "bannerUrl"],
      });
      miniSearch.addAll(documents);

      const searchResults = document.getElementById("huds-search-results");

      const emptySearch =
        '<p class="lead mt-0 mb-2">Type to search for HUDs!</p>\
      <h6 class="mb-1">Advanced syntax</h6>\
      <span><code>author:username</code> - search by author name</span><br/>\
      <span><code>name:hud</code> - search by HUD name</span><br/>\
      <span><code>tags:minimal</code> - search by tags</span><br/>\
      <span><code>has:streamer-mode</code> - search by feature</span><br/>\
      <span><code>os:windows</code> - search by HUD operating system</span><br/>\
      <span><code>gamemode:pl</code> - search by gamemode UI</span><br/>\
      <span><code>res:16/9</code> - search by resolution</span><br/>\
      <span><code>position:center</code> - search by ammo/health positioning</span><br/>\
      <p class="mt-1 mb-0 fw-semibold">UI for advanced search coming soon!</p>';
      const noResults = '<p class="lead m-0">No results found.</p>';

      let currentInput = "";
      function searchInternal(query) {
        currentInput = query;
        if (!query || query.length === 0) {
          searchResults.innerHTML = emptySearch;
          return;
        }
        const [queryVal, options] = buildExpressionTree(query);
        let bUseFilters = false;
        if (!queryVal || queryVal.length === 0) {
          if (options.filter) {
            bUseFilters = true;
          } else {
            searchResults.innerHTML = emptySearch;
            return;
          }
        }
        const results = bUseFilters
          ? documents.filter(options.filter)
          : miniSearch.search(queryVal, options);
        if (!results || results.length === 0) {
          searchResults.innerHTML = noResults;
          return;
        }
        searchResults.innerHTML = "";
        for (const result of results) {
          const resultDiv = document.createElement("div");
          resultDiv.classList.add("card", "mb-2", "text-start");
          const resultRow = document.createElement("div");
          resultRow.classList.add("row", "g-0");
          const resultImgCol = document.createElement("div");
          resultImgCol.classList.add("col-md-4", "search-result-img-container");
          const resultImg = document.createElement("img");
          resultImg.classList.add("w-100", "h-100", "object-fit-cover");
          resultImg.style.objectFit = "cover";
          resultImg.src = result.bannerUrl;
          resultImg.alt = "";
          resultImg.crossOrigin = "";
          resultImg.loading = "lazy";
          resultImgCol.appendChild(resultImg);
          resultRow.appendChild(resultImgCol);
          const resultBodyCol = document.createElement("div");
          resultBodyCol.classList.add("col-md-8");
          resultRow.appendChild(resultBodyCol);
          const resultBody = document.createElement("div");
          resultBody.classList.add("card-body");
          const resultTitle = document.createElement("h5");
          resultTitle.classList.add("card-title");
          const resultLink = document.createElement("a");
          resultLink.classList.add("stretched-link");
          resultLink.href = `/huds/page/${result.id}`;
          resultLink.innerText = result.name;
          resultTitle.appendChild(resultLink);
          const resultAuthor = document.createElement("h6");
          resultAuthor.classList.add("card-subtitle", "mb-2", "text-muted");
          resultAuthor.innerText = result.author;
          resultBody.appendChild(resultTitle);
          resultBody.appendChild(resultAuthor);
          resultBodyCol.appendChild(resultBody);
          resultDiv.appendChild(resultRow);
          searchResults.appendChild(resultDiv);
        }
      }

      // TODO: 145ms may be too low, investigate to adjust
      const search = debounce(searchInternal, 145);

      const searchInput = document.getElementById("search-input");
      searchInput.addEventListener("input", (event) => {
        const query = event.target.value;
        search(query);
      });
      let isFocused = false;
      let clickedOut = true;
      searchInput.addEventListener("focus", (event) => {
        const query = event.target.value;
        if (query !== currentInput) {
          search(query);
          search.flush();
        }
        searchResults.classList.remove("d-none");
        isFocused = true;
        clickedOut = false;
      });
      // Only remove search results if not clicking the search results
      searchInput.addEventListener("blur", () => {
        isFocused = false;
      });
      window.addEventListener("click", (event) => {
        if (!isFocused && !searchResults.contains(event.target)) {
          searchResults.classList.add("d-none");
          if (!clickedOut && !isFocused) {
            event.preventDefault();
            clickedOut = true;
          }
        }
      });
    }
  }

  if (!customElements.get("hud-search")) {
    customElements.define("hud-search", HudSearch);
  }
</script>
