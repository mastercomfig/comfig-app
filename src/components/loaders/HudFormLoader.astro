---

---

<hud-form-loader></hud-form-loader>

<script>
  class HudFormLoader extends HTMLElement {
    async connectedCallback() {
      const formElement = document.getElementById("hud-form");

      function generateFormObject(elements) {
        const formObject = {};
        for (const element of elements) {
          if (!element.value && element.type !== "checkbox") {
            continue;
          }
          let id = element.id.split(".");
          if (id.length === 2) {
            id = id[1];
          } else if (id.length === 1) {
            id = id[0];
          } else {
            console.error("Invalid id split length");
          }
          if (element.type === "checkbox") {
            const checkListSplit = id.split(":");
            if (checkListSplit.length == 2) {
              if (!element.checked) {
                continue;
              }
              if (!formObject[checkListSplit[0]]) {
                formObject[checkListSplit[0]] = [];
              }
              formObject[checkListSplit[0]].push(checkListSplit[1]);
            } else if (checkListSplit.length == 1) {
              formObject[id] = element.checked;
            } else {
              console.error("Invalid checklist split length");
            }
          } else if (element.dataset?.array) {
            formObject[id] = element.value.split(",").map((value) => {
              return value.trim();
            });
          } else {
            formObject[id] = element.value;
          }
        }
        return formObject;
      }

      function downloadFile(file, filename) {
        let url = URL.createObjectURL(file);

        const link = document.createElement("a");
        link.href = url;
        link.download = filename;
        document.body.append(link);
        link.dispatchEvent(
          new MouseEvent("click", {
            bubbles: true,
            cancelable: true,
            view: window,
          }),
        );
        link.remove();
        setTimeout(() => {
          URL.revokeObjectURL(url);
          url = null;
        }, 120000);
      }

      formElement.addEventListener(
        "submit",
        (e) => {
          e.preventDefault();
          e.stopPropagation();

          const isValid = formElement.checkValidity();
          const validatedElements =
            formElement.querySelectorAll(".form-control");
          for (const element of validatedElements) {
            if (element.value || element.required) {
              element.parentNode.classList.add("was-validated");
            }
          }

          if (!isValid) {
            return;
          }

          const form = formElement.elements;

          let formObject = {};
          for (const element of form) {
            const subObjectSplit = element.id.split(".");
            if (subObjectSplit.length === 2) {
              if (!formObject[subObjectSplit[0]]) {
                formObject[subObjectSplit[0]] = [];
              }
              formObject[subObjectSplit[0]].push(element);
            } else if (subObjectSplit.length === 1) {
              if (!formObject["__default"]) {
                formObject["__default"] = [];
              }
              formObject["__default"].push(element);
            } else {
              console.error("Invalid subobject split length");
            }
          }

          for (const [name, elements] of Object.entries(formObject)) {
            formObject[name] = generateFormObject(elements);
          }

          for (const [name, formSubObject] of Object.entries(formObject)) {
            if (name === "__default") {
              continue;
            }
            formObject.__default[name] = formSubObject;
          }

          formObject = formObject.__default;

          const id = formObject.id;
          delete formObject.id;

          const description = formObject.description;
          delete formObject.description;

          const json = JSON.stringify(formObject, null, 2);

          const file = new File([json], `${id}.json`, {
            type: "application/octet-stream",
          });

          downloadFile(file, `${id}.json`);

          if (description) {
            const descriptionFile = new File([description], `${id}.md`, {
              type: "text/markdown",
            });
            setTimeout(() => {
              downloadFile(descriptionFile, `${id}.md`);
            }, 2000);
          }
        },
        false,
      );

      const nameElement = document.getElementById("name");
      const idElement = document.getElementById("id");

      let modifiedId = false;
      idElement.addEventListener("input", (e) => {
        if (idElement.value === nameElement.value) {
          modifiedId = false;
        } else if (!idElement.value) {
          modifiedId = false;
        } else {
          modifiedId = true;
        }
      });
      nameElement.addEventListener("input", (e) => {
        if (!modifiedId) {
          idElement.value = nameElement.value
            .toLowerCase()
            .replace(/[^a-z0-9-]/g, "-")
            .replace(/-+/g, "-");
        }
      });
    }
  }

  if (!customElements.get("hud-form-loader")) {
    customElements.define("hud-form-loader", HudFormLoader);
  }
</script>
